package com.github.wukap.uno_soft.service.groupBuilder;

import com.github.wukap.uno_soft.model.group.Group;
import com.github.wukap.uno_soft.service.parser.ParseService;
import com.github.wukap.uno_soft.service.parser.numberHandler.*;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@Slf4j
class GroupBuilderTest {

    private ParseService parseService;
    private GroupBuilder groupBuilder;

    @BeforeEach
    void setUp() {
        NumberHandler emptyHandler = new EmptyHandler();
        NumberHandler quotedEmptyHandler = new QuotedEmptyHandler();
        NumberHandler plainHandler = new PlainNumberHandler();
        NumberHandler quotedHandler = new QuotedNumberHandler();
        NumberHandler quotedFloatHandler = new QuotedFloatHandler();
        NumberHandler plainFloatHandler = new PlainFloatHandler();
        parseService = new ParseService(List.of(emptyHandler, quotedEmptyHandler, plainHandler, quotedHandler, quotedFloatHandler, plainFloatHandler));
        groupBuilder = new GroupBuilder(parseService);
    }

    @Test
    void singleGroup1(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "111;123;222"
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(1, groups.size());
        assertEquals(1, groups.get(0).getLength());
    }

    @Test
    void singleDoubleGroup1(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "111.1;123.3;222.2"
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(1, groups.size());
        assertEquals(1, groups.get(0).getLength());
    }

    @Test
    void singleGroup2(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "111;123;222",// Group 1
                "200;123;100",// Group 1 (via 123)
                "300;;100"   // Group 1 (via 100)
        ));
        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(1, groups.size());
        assertEquals(3, groups.get(0).getLength());
    }


    @Test
    void singleDoubleGroup2(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "111;123.2;222",// Group 1
                "200;123.2;100",// Group 1 (via 123)
                "300;;100"   // Group 1 (via 100)
        ));
        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(1, groups.size());
        assertEquals(3, groups.get(0).getLength());
    }

    @Test
    void severalGroups1(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("merge.txt");
        Files.write(testFile, List.of(
                "111;123;222",  // Group 1
                "200;123;100",   // Group 1 (via 123)
                "300;;100",      // Group 1 (via 100)
                "400;500;600",   // Group 2
                "700;500;800"    // Group 2 (via 500)
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(2, groups.size());
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 3));
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 2));
    }
    @Test
    void severalFloatGroups1(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("merge.txt");
        Files.write(testFile, List.of(
                "111.1;123;222",  // Group 1
                "200;123;100.10",   // Group 1 (via 123)
                "300;;100.1",      // Group 1 (via 100)
                "400;500;600",   // Group 2
                "700;500;800"    // Group 2 (via 500)
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(2, groups.size());
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 3));
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 2));
    }

    @Test
    void severalGroups2(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "100;200;300",
                "200;300;100"
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(2, groups.size());
        assertTrue(groups.stream().allMatch(g -> g.getLength() == 1));
    }

    @Test
    void severalFloatGroups2(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "100;200.2;300",
                "200;200.3;100"
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(2, groups.size());
        assertTrue(groups.stream().allMatch(g -> g.getLength() == 1));
    }

    @Test
    void quotedValues1(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "\"111\";\"123\";\"222\"",
                "\"200\";\"123\";\"100\"",
                "\"300\";;\"100\""
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(1, groups.size());
        assertEquals(3, groups.get(0).getLength());
    }
    @Test
    void quotedFloatValues1(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "\"111\";\"123.1\";\"222\"",
                "\"200\";\"123.100\";\"100\"",
                "\"300\";;\"100.0\""
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(1, groups.size());
        assertEquals(3, groups.get(0).getLength());
    }

    @Test
    void skipEmptyConnectors(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "\"111\";\"\";\"222\"",
                "\"200\";\"\";\"100\"",
                "\"300\";;\"100\""
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(2, groups.size());
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 2));
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 1));
    }

    @Test
    void nonEqualsLinesSizes1(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "111;123;222",// Group 1
                "2", // Group 2
                "111;;100",// Group 1
                "111;;;;100",// Group 1
                "2;;;;2",// Group 2
                "1;1;1;1;1;1;1"// Group 3
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(3, groups.size());
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 3));
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 2));
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 1));
    }

    @Test
    void nonEqualsLinesSizes2(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "111;123;222",// Group 1
                "2", // Group 1 (via 2)
                "111;;100",// Group 1
                "111;;;;100",// Group 1
                "2;;;;100",// Group 1 (via 100)
                "1;1;1;1;1;1;1"// Group 3
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(2, groups.size());
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 5));
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 1));
    }

    @Test
    void allLinesMergeInOneGroupAtLastLine(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "1;2;3;4;5;6",// Group 1
                "2;3;4;5;6;7", // Group 1
                "3;4;5;6;7;8",// Group 1
                "4;5;6;7;8;9",// Group 1
                "5;6;7;8;9;10",// Group 1
                "6;7;8;9;10;11",// Group 1
                "1;3;5;7;9;11"// Group 1
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(1, groups.size());
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 7));
    }

    @Test
    void partOfBigTest1(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("big_part.txt");
        Files.write(testFile, List.of(
                """
                        "79664286877";"79891466568";"79111896948";"79398812607";"";"79267093629";"79823352484";"79693657223";"79800284554";""
                        "79684383464";"79916678715";"79653159406";"79257030558";"79421370249";"79680241285"
                        "79682117997";"79848450518";"79725006703"
                        "79755815846";"79901315126";"79281519176";""
                        "79358327899";"79531283544";"79893336381";"79620914466";"79033167762";"79092682773"
                        "79978137033";"79087778198";"79846685120";"79171210747";"79962106781";"79015504055";"79860707495";"79248826148";"79960384432";""
                        "79636586982";"79325616014";"79935452456"
                        """
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(7, groups.size());
        assertTrue(groups.stream().allMatch(g -> g.getLength() == 1));
    }

    @Test
    void partOfBigTest2(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("big_part.txt");
        Files.write(testFile, List.of(
                """
                        "79664286877";"79891466568";"79111896948";"79398812607";"";"79267093629";"79823352484";"79693657223";"79800284554";""
                        "79664286877";"79916678715";"79653159406";"79257030558";"79421370249";"79680241285"
                        "79682117997";"79848450518";"79725006703"
                        "79755815846";"79848450518";"79281519176";""
                        "79358327899";"79531283544";"79893336381";"79620914466";"79033167762";"79092682773"
                        "79358327899";"79087778198";"79846685120";"79171210747";"79962106781";"79015504055";"79860707495";"79248826148";"79960384432";""
                        "79358327899";"79325616014";"79935452456"
                        """
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(3, groups.size());
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 2));
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 3));
    }

    @Test
    void partOfBigTest3(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("big_part.txt");
        Files.write(testFile, List.of(
                """
                        "79297880212";"79369907444";"79979597372";"79560230731";"79595523808";"79597253994";"79174295879"
                        "";"79889519826";""
                        "79207662350";"79078668427";"79963844470";"79548884352";"79141974588";"79290356173";"79872467788";"79492287254";"79729755567";"79327814446";"79372024347"
                        "79732998847";"79675652584";"79413806745";"79215939501";"";"79329691522";"79834428925";"79160738075"
                        "79678473176";"79836077925";"79484977287"
                        "79590916786";"79189846739";"79628387040"
                        "79120000427";"79870601823";"79419912532";"79111535007";"79465201079"
                        "79664286877";"79891466568";"79111896948";"79398812607";"";"79267093629";"79823352484";"79693657223";"79800284554";""
                        "79684383464";"79916678715";"79653159406";"79257030558";"79421370249";"79680241285"
                        "79682117997";"79848450518";"79725006703"
                        "79755815846";"79901315126";"79281519176";""
                        "79358327899";"79531283544";"79893336381";"79620914466";"79033167762";"79092682773"
                        "79978137033";"79087778198";"79846685120";"79171210747";"79962106781";"79015504055";"79860707495";"79248826148";"79960384432";""
                        "79636586982";"79325616014";"79935452456"
                        "79923617770";"79776246479";"79107638626";"";"79879320249";"79117333625";"79430838459";"79730697087"
                        "";"79608333511";"79282742056";"79864100345";"79917524128";"79596038737";"79668647378";"79206567506"
                        "79836799844";"79591034347";"79569062458";"79040960113";"79388554023";"79856939848";"79389558337";"79559658692"
                        "79506611870";"79822832739";"79017005961";"79768485808";"79968384588";"79062825574";"79536595216";"79330083085";"79413676733";"79762032125"
                        "79201844828";"79442505695";"79446562566";"79829079129";"";"79734378546";"";"79667987320";"79065319471";"79447287641";""
                        "79090052528";"79634824467";"";"79851245435";"79048671440";"79806523483"
                        "79657864192";"79821847512";"79729314440";"79936569012";"79350373265";"79445016234";""
                        "79602687265";"79185470799";"79360937066";"";"";"79673858845";"79958239451"
                        "79205156992";"79810237075"
                        "79368124738";"79988053227";"79620181182";"";"79310555646"
                        "79699305362";"79389562389";"79073861994";"79189211636";"79158441576";"79531425006"
                        "79860541734";"79150927297";"79845560305";"79835945232";"79744522711";"79284086568"
                        "";"79997017330"
                        "79367593924";"79002244747";"79317725156";"79646213345";"";"79458126164"
                        "";"";"79873152712";"79536920657";"79403418029";"79172841023";"79359908509";"";""
                        "79301756735";"";"";"79221134769";"79645418111"
                        "79477309414";"79975148561";"79644196053"
                        "79411558760";"79874225423";"79359420466";"";"79386978821";"79147799656";"79483735030";"79989294933";"79828632945";"79460443576";""
                        "79486620695";"79643668998";"79152461676";"79050546641";"79744716920";"79053731907"
                        "79326311106";"79317452365";"79954434186";"79572229454";"79131838488";"79355219637";"79383655576";"79274771885";"79444870690";"79601234501";""
                        "79268957797";"79985044543"
                        "79750512537";"79975143614";"79171996714";"79468529486";"79275385526";"79887721390";"79314428096";"";"79404405505"
                        "79483495571";"79806697073";"79730072575";"79059512788"
                        "79322840529";"79053384921"
                        "79951709639";"79106331611";"79965744349";"";"79085755971";"79322007720";"79229654178"
                        "79324719446";"79142125019";"79649753426";"";"79952002254";"79000325162";"79622663623"
                        "79633157161";"79401237714";"79053895726"
                        "79029035015";"79500169261";"79744229959";"79805326344";"79225148684"
                        "";"79499089341";"79938101460";"79975228391";"79912615456";"79265785232";"79875761453";"79303783787";"79586610681";"79763755462"
                        "79261740194";"79040250702";"79817218367";"79031259920";"79948107853";"79340832658";"79980575567";"79164597137";"79221737688";"79302546608"
                        "79353656838";"79455373268";"79270447863";"79203793967";"79641237544";"79844726688";"79396762676";"79563840299";"79283679870";"79260914383";"79608199835"
                        "79712610012";"79299447695";"79656666398";"79462989758";"79812202202";"79666256961";"79812714738";"79300133290";"";"79808572561";"79337398165"
                        "79727568799";"79672063930";"79614746884";"79205329754";"79872479405";"79392014286";"79458859355";"79884649932";""
                        "";"79606406823";"79693536244";"";"79209579785";"79465631745";"79484704614";"79311020462";"79088445553";"79727509725"
                        "79769518466";"79599928255";"79569989421";"79696168462";"79039208007";"79877656876";"79533717524";"79472354193"
                        "79758445635";"";"79046647057";"79694558081";"79914835620";"79501893311";"79821181343";"79257115326";"79665966930";"79324790997";"79328098342"
                        "79885697810";"79159520440";"79801536438";"79141925826";"79464949966";"79203590624"
                        "79402702684";"79929521655";"79650847617";"79914701454";"79952939130";"79308069103";"79645822401";""
                        "79153697842";"79461169588";"79471532309"
                        "79557296263";""
                        "79889148461";"79552478541";"79030597913";"79234459023";"79853143590";"79709174329";"79223969930";"79742921724";"79444548454"
                        "79631859721";"79189901969";"79470576467";"79428933351";"79344609152";"79293867372"
                        "79833419684";"79274080003";"79883183550";"79298066536";"79062849539";"79237026236";"79452280870";"79114517880";"";"79458182834";"79630896894"
                        "79531768716";"79699624717";"79867965054";"";"79982810126";"79784883030"
                        "79447920595";"";"79306338097"
                        "79742758772";"79651192299";"79843754856";"79274600420";"79009247734";"79103887437";"79440162288";"79851718341";"79219985172"
                        "";""
                        "79900270717";"79586131950";"79424259833";"";"";"79565399929";"79404153472";"79706968574";"79343983843";"79969666834"
                        "79658842100";"79405963581";"";"79611713878";"79662652456";"79311607483"
                        "79885455233";"";"79338870133";"79634763219";"79633176025";"79527359399";"79195317726";"79535991273";"79893814248"
                        "79101160896";"79075392132";"79930198968";"79911619901";"79000027689";"79973700427";"79991099660";"79092092573"
                        "79358110104";"79113296972"
                        "";"79451332886";"79348859101";"79585368825";"79131086826";"79901068630";"79964160012"
                        "";"79499325652";"79460704210";"79239570092";"79281547038";"79496495837";"79109030888";"79962896533"
                        "";"79346982156";"79373596029";"79800475326";"79624153942";"79768532933";"79573457590"
                        "79519177212";"79479541940";"79392559098";"79442135827";"79894825889";"79381154583";"79169217491";"79380961748";"79946716972";"79694620538"
                        "79407682143";"79047080879";"79996237010";"";"";"79120803066";"79065925310";"79847002039";"79885727794"
                        "79143263652";"79377535656"
                        "79974822779";"79860600407";"79558392839";"79314389645";"79387652890";"";"79658285345";"79819110926"
                        "79461749306";"";"79511633696";"79395907243";"79974688873";"79141689609";"79618626811"
                        "79843779696";"79969943984";"79231937114";"79669639056";"79812003101";"79472763571";"79577552540";"79748293903";"79793171776"
                        "79883896108";"79906765690";"79626132019";"79039899109";"79793880706";"";"79801516450"
                        "79751604335";"79670838510"
                        "79980208659";"79256995905";"79752192866";"79788594144";"79984681245";"79972421362"
                        "79824863860";"79337613610";"79813177894";"79165735861";"79223606299";"79675754292";"79445870485"
                        "79532289856";"79814332519";"79676207182";"79859711872";"79938506620";"";"79440711895";"79413546980"
                        "79117071954";"79664553767";"";"";"79392473413"
                        "79184342844";"79969120218";"79201872806";"79144980750";"79872022636";"79845613796";"79324824112";"79481951849";"79030491306";"";"79577584379"
                        "79548172270";"";"79606617965";"79424853562";"79038533139";"79907933478"
                        "79147324835";"79512690523";"79230816435";"79727672830";"79605946515";"79042873141";"79584273051";"79568631594";"79861540949";"79466810982"
                        "79922662144";"79221862005";"";"79819630839"
                        "79131367590";"79228902487";"79247186050";"79064381968";"79422240944";"79316867880";"79399653265";"79385804104"
                        "79230027961";"79526163648";"";"79273224064"
                        "79303846732";"79346979784"
                        "79048038808";"79916355993";"79412224791";"79379570780";"79712234007";"79843695615";"79502379805";"79569014487";"79216165493";"79475822772"
                        "79157287051";"79578687126";"79850973354";"";"79122477933";"79478179000"
                        "79925957035";"79557577343";"79089134748";"79746578804";"79600227953"
                        "79639175782";"79487427866";"";"79764863936";"79958905653";"79359333059";"79914693365";"79418053173"
                        "79124848855";"79834460919";"79226123768";"79248880421"
                        "79784607118";"79680516886";"79146480718";"79762081659";"79283267142";"79689140055";"79591806021";"79137874384"
                        "79766420300";"79827806372";"79799211756";"79110124857";"79884150718";"79947616066";"79501601894";"79918795033";"79242154769"
                        "79426689148";"79992103540";"79121825399";"79947648007";"79659324988"
                        "79550863802";"";"79498823312";"79591569299";"79684299524";"79648748255"
                        "79721475694";"79466368805";"79266455497";"";"79075539358";"";"79773261291";"";"79618068470"
                        "79292435872";"79443698236";"79483635569"
                        "79925232542";"79469188924";"79712584811";"79405119665";"79864871360";"79179258739";"79127563038";"79604324555";"79449155394"
                        "79514599052";"79061850258";"79962275265";"";"";"79038653184";"79388542749";"79455712584";"79561506930";"79915192771";"79774142331"
                        "79465161350";"79965396371";"79498154686";"79293433104";"79780325413";"79019742469";"79917632968";"79463364613";"79962965433";"79546011880"
                        "79447181742";"";"";"79977415915";"79035655635";"79687585297"
                        "79201367682";"79248897605";""
                        "79303043058";"79303041698";"79236972945";"79321953660";"79591607714"
                        "79400314443";"79777280416";"79062897025";"79865228276";"79532160617";"79991031200";"79799345767";"79555040825";"79800802514";"";"79209630466"
                        "79890302928";"";"79687363412";"79493451214";"79363380070"
                        "79588356481";"";"79950954624";"";"";"79659161450";"79854295797";"79241689530";"79652221207";"79126054563";"79291775256"
                        "79473288513";"79479437742"
                        "79627987649";"79042008351"
                        "79602526314";"79381924252";"79668952702";"";"79752974530";"79770328643";"79207324856"
                        "79364062251";"79064898565";"79874734588"
                        "79203153475";"79208663835";"79090805978"
                        "79254643232";"79349589810";"79862661845"
                        "79715742203";"79748613387";"79526248709";"79192699609";"79098040799";"79283023566";"79142755062";"79370907197";"";"79786604311"
                        "79502547911";"79350641410";"79935804934";"";"79462112288";""
                        "";"79060332270";"79963945814";"79571857485";"";"";"79356231736";"79028860360"
                        "79736315000";"79975014494";"79259821902";"79295291864";"79504402129";"79532061612";"79961937910";"79850110574";"79796522442"
                        "79044583890";"79560622597"
                        "";"79310589728";"79048169214";"79594576416";"79812365960";"79074798380"
                        "79274675847";"79093114282";"";"79532326730";"79100681480";"79993309599";"";"79210305018";"79485177839";"79665307841";"79656712265"
                        "79544630041";"79967903647";""
                        "79806104321";"79965674823";"79262943323";"79616890041";"79658173797";"79858388812";"79808063101";"79118627986"
                        "79796242235";"79214807508";"79869928490";"79433740232";"79651860938";"79868269117";"79362315512";"79805649202";""
                        "79512437331";"79917152135";"79428694196";"";"79520983635";"79382441718";"79096708615";"79205400301"
                        "79883592594";"79246344300";"79368908244";"79775965145"
                        "79177527665";"79240304487";"79363952147";"79603062356";"79749852599";"79021882814";"79026876838"
                        "79586675401";"79368895805";"79013068954";"79853523320";"79380383786";"79079658835"
                        "79231047599";"";"79503046889";"79001422635";"";"79890021239";"79525290981";"79629480480";"79296326361";"79902996402"
                        "79253118753";"79127469115";"79138218492";"79662439463";"79203296253";"79989292032";"79060030759";"79728708476"
                        "79775145941";"79267397454";"79684236907";"79305167041"
                        "79329689199";"79204694407";"79389909010";"79628886415";"79460246585";"79584514021";"";"";"79655842541"
                        "79378821916";"79908268565";"79571316434";"79669513742";"79109676226";"79154714467";"79625000567";"79691785618";"79431497787";"79124725643"
                        "79348240156";"79825069292";"79759574900";"79625483238";"79619299941";"79904539285";"79409376966"
                        "79997988218";"79900868637";"79089397354";"79932950832";"";"79622867636";"79113617465";"79403225908";"79203202541"
                        "79185536155";"";"79434234438"
                        "79301820256";"79844719967";"79608326688";"";"79028051101";""
                        "79807758847";"79596511530";"";"79129675486";"79099269456";"79796732069"
                        "79138975153";"79975326290";"79837543751";"79883299176";"";"79826595874";"79903077785";"79154839051"
                        "79637752969";"79529826649";"79015951485";"79529622806";"79436267201";"79200981029"
                        "79925985092";"79128731813";"79909771777";"79520238987";"79462810934";"79968530023"
                        "79196850974";"79160243752"
                        "79920797752";"79428328503";"79741897983";"79714462702";"79329223716"
                        "79202458558";"79648082183";"79611449259";"79592139364";"79896448718";"79589459477";""
                        "79116168019";"79940451649";"79623162625"
                        "79895876706";"79023453592";"79384859390";"79706625706";"79861519888";"79257859372";"";"79166082202";"79379554018";"79159235263"
                        "79991780474";"79082893127";"79433990879"
                        "";"79276653067";"79949794371";"";"79888261482";"79135249284";"79348061076";"79754346136";"79175256912"
                        "79168891370";"79414067594";"79765349071";"79417657904";"79189282569";"79433768924";"79532867892";"79203814686";""
                        "";"79972937402";"";"79732761893";"79782730267";"79394774258";"79460622053";"79641467824";"79686635298";"79274960994"
                        "79014441098";"79523470689";"79330240246";"79057143568";"79411620940";"79556561559";"79670697850";"79886442518"
                        "79279072764";"79412408155";"79873133845";"79765293223";"79820436611"
                        "79405321446";"79591386810";"79667574972";"79125171871";"79580536316";"79204863581";"79641082340";"79763841995";"79902162634";"79734166829"
                        "79183494978";"79517248782";"79950963020"
                        "79408150652";"79427002404";"79337073481";"79792113467"
                        "79105060909";"79916739657"
                        "";"79687283295";"79946435046";"79302386118";""
                        "79252738256";"79461929934";"79124284547";"79238712836"
                        "79696319726";"79985746653";"79860617075";"79998347320";"79506128085";"79680116534";"79511285944"
                        "79635057345";"";"79022015278";"79058800196";"79848319450";"79983723832";"79560764108";"79780206607";"79949100893"
                        "79355026380";"79030936524";"79377533023";""
                        "";"79117357451";"79599414504";"";"79412663805"
                        "79294204108";"79793374508";"79429010963";"79684419566"
                        "79801793582";"79316796917";"79185978893";"";"79702891277";"79609783280"
                        "79663997239";"79678209717";"79084113375";"79369867902";"79902735968";"";"79239559029";"79624343627"
                        "79387147839";"79837222285";"79728549114";"79708867158";"79236925045";"79929575061";"79800324680"
                        "79443800597";"79125979777";"79443353826";"79716393932";"79350375567";"79812031396"
                        "79681478189";"79008887761";"79263541366";"79853951532";"";"79158961929";"";"79584094394";"79438737943"
                        "79282294563";"79538578460"
                        "79007431397";"79795463570";"79646145127";"";"79052564365";"79666487079"
                        "79141628366";"79810235024";"79067322308";"79825495369";"79136657357";"79216304711";"79309392073"
                        "79096243656";"79661485730"
                        "";"79713259818";"";"79353918669";"79154072203";"79681805472";"79968798369";"79287118207";"";"79740778973";"79678003157"
                        "";"79504694228";"79086946717";"79939930522";"79564604675";"79434160782";"79975608779";"79051519739";"79581423231"
                        "79953073052";"79656543830";"79340818086"
                        "79595707188";"79944784020";"79181280039";"79563027624";"79919550659";"79219984669";"79050933115";"79095551371";"79566634695"
                        "79495434220";"79323125474"
                        "79782720607";"79135788221";"79371286469";"79554415855";"";"79125714583";"79958681784";"79809695918";"79219546635"
                        "79870357070";"79815973293";"79598987901";"79806266871";"79578474810";"";"79478889591";"79628439950";"79548481058";"79681829377";"79631718704"
                        """
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(178, groups.size());
        assertTrue(groups.stream().allMatch(g -> g.getLength() == 1));
    }

    @Test
    void partOfBigTest4(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("big_part.txt");
        Files.write(testFile, List.of(
                """
                        "79297880212";"79369907444";"79979597372";"79560230731";"79595523808";"79597253994";"79174295879"
                        "";"79889519826";""
                        "79207662350";"79078668427";"79963844470";"79548884352";"79141974588";"79290356173";"79872467788";"79492287254";"79729755567";"79327814446";"79372024347"
                        "79732998847";"79675652584";"79413806745";"79215939501";"";"79329691522";"79834428925";"79160738075"
                        "79678473176";"79836077925";"79484977287"
                        "79590916786";"79189846739";"79628387040"
                        "79120000427";"79870601823";"79419912532";"79111535007";"79465201079"
                        "79664286877";"79891466568";"79111896948";"79398812607";"";"79267093629";"79823352484";"79693657223";"79800284554";""
                        "79684383464";"79916678715";"79653159406";"79257030558";"79421370249";"79680241285"
                        "79682117997";"79848450518";"79725006703"
                        "79755815846";"79901315126";"79281519176";""
                        "79358327899";"79531283544";"79893336381";"79620914466";"79033167762";"79092682773"
                        "79978137033";"79087778198";"79846685120";"79171210747";"79962106781";"79015504055";"79860707495";"79248826148";"79960384432";""
                        "79636586982";"79325616014";"79935452456"
                        "79923617770";"79776246479";"79107638626";"";"79879320249";"79117333625";"79430838459";"79730697087"
                        "";"79608333511";"79282742056";"79864100345";"79917524128";"79596038737";"79668647378";"79206567506"
                        "79836799844";"79591034347";"79569062458";"79040960113";"79388554023";"79856939848";"79389558337";"79559658692"
                        "79506611870";"79822832739";"79017005961";"79768485808";"79968384588";"79062825574";"79536595216";"79330083085";"79413676733";"79762032125"
                        "79201844828";"79442505695";"79446562566";"79829079129";"";"79734378546";"";"79667987320";"79065319471";"79447287641";""
                        "79090052528";"79634824467";"";"79851245435";"79048671440";"79806523483"
                        "79657864192";"79821847512";"79729314440";"79936569012";"79350373265";"79445016234";""
                        "79602687265";"79185470799";"79360937066";"";"";"79673858845";"79958239451"
                        "79205156992";"79810237075"
                        "79205156992";"79988053227";"79620181182";"";"79310555646"
                        "79699305362";"79389562389";"79073861994";"79189211636";"79158441576";"79531425006"
                        "79860541734";"79150927297";"79845560305";"79835945232";"79744522711";"79284086568"
                        "";"79997017330"
                        "79367593924";"79002244747";"79317725156";"79646213345";"";"79458126164"
                        "";"";"79873152712";"79536920657";"79403418029";"79172841023";"79359908509";"";""
                        "79301756735";"";"";"79221134769";"79645418111"
                        "79477309414";"79975148561";"79644196053"
                        "79411558760";"79874225423";"79359420466";"";"79386978821";"79147799656";"79483735030";"79989294933";"79828632945";"79460443576";""
                        "79486620695";"79643668998";"79152461676";"79050546641";"79744716920";"79053731907"
                        "79326311106";"79317452365";"79954434186";"79572229454";"79131838488";"79355219637";"79383655576";"79274771885";"79444870690";"79601234501";""
                        "79268957797";"79985044543"
                        "79633157161";"79975143614";"79171996714";"79468529486";"79275385526";"79887721390";"79314428096";"";"79404405505"
                        "79483495571";"79806697073";"79730072575";"79059512788"
                        "79322840529";"79053384921"
                        "79951709639";"79106331611";"79965744349";"";"79085755971";"79322007720";"79229654178"
                        "79324719446";"79142125019";"79649753426";"";"79952002254";"79000325162";"79622663623"
                        "79633157161";"79988053227";"79053895726"
                        "79029035015";"79500169261";"79744229959";"79805326344";"79225148684"
                        "";"79499089341";"79938101460";"79975228391";"79912615456";"79265785232";"79875761453";"79303783787";"79586610681";"79763755462"
                        "79261740194";"79040250702";"79817218367";"79031259920";"79948107853";"79340832658";"79980575567";"79164597137";"79221737688";"79302546608"
                        "79353656838";"79455373268";"79270447863";"79203793967";"79641237544";"79844726688";"79396762676";"79563840299";"79283679870";"79260914383";"79608199835"
                        "79712610012";"79299447695";"79656666398";"79462989758";"79812202202";"79666256961";"79812714738";"79300133290";"";"79808572561";"79337398165"
                        "79727568799";"79672063930";"79614746884";"79205329754";"79872479405";"79392014286";"79458859355";"79884649932";""
                        "";"79606406823";"79693536244";"";"79209579785";"79465631745";"79484704614";"79311020462";"79088445553";"79727509725"
                        "79769518466";"79599928255";"79569989421";"79696168462";"79039208007";"79877656876";"79533717524";"79472354193"
                        "79758445635";"";"79046647057";"79694558081";"79914835620";"79501893311";"79821181343";"79257115326";"79665966930";"79324790997";"79328098342"
                        "79885697810";"79159520440";"79801536438";"79141925826";"79464949966";"79203590624"
                        "79402702684";"79929521655";"79650847617";"79914701454";"79952939130";"79308069103";"79645822401";""
                        "79153697842";"79461169588";"79471532309"
                        "79557296263";""
                        "79889148461";"79552478541";"79030597913";"79234459023";"79853143590";"79709174329";"79223969930";"79742921724";"79444548454"
                        "79631859721";"79189901969";"79470576467";"79428933351";"79344609152";"79293867372"
                        "79833419684";"79274080003";"79883183550";"79298066536";"79062849539";"79237026236";"79452280870";"79114517880";"";"79458182834";"79630896894"
                        "79531768716";"79699624717";"79867965054";"";"79982810126";"79784883030"
                        "79447920595";"";"79306338097"
                        "79742758772";"79651192299";"79843754856";"79274600420";"79009247734";"79103887437";"79440162288";"79851718341";"79219985172"
                        "";""
                        "79900270717";"79586131950";"79424259833";"";"";"79565399929";"79404153472";"79706968574";"79343983843";"79969666834"
                        "79658842100";"79405963581";"";"79611713878";"79662652456";"79311607483"
                        "79885455233";"";"79338870133";"79634763219";"79633176025";"79527359399";"79195317726";"79535991273";"79893814248"
                        "79101160896";"79075392132";"79930198968";"79911619901";"79000027689";"79973700427";"79991099660";"79092092573"
                        "79358110104";"79113296972"
                        "";"79451332886";"79348859101";"79585368825";"79131086826";"79901068630";"79964160012"
                        "";"79499325652";"79460704210";"79239570092";"79281547038";"79496495837";"79109030888";"79962896533"
                        "";"79346982156";"79373596029";"79800475326";"79624153942";"79768532933";"79573457590"
                        "79519177212";"79479541940";"79392559098";"79442135827";"79894825889";"79381154583";"79169217491";"79380961748";"79946716972";"79694620538"
                        "79407682143";"79047080879";"79996237010";"";"";"79120803066";"79065925310";"79847002039";"79885727794"
                        "79143263652";"79377535656"
                        "79974822779";"79860600407";"79558392839";"79314389645";"79387652890";"";"79658285345";"79819110926"
                        "79461749306";"";"79511633696";"79395907243";"79974688873";"79141689609";"79618626811"
                        "79843779696";"79969943984";"79231937114";"79669639056";"79812003101";"79472763571";"79577552540";"79748293903";"79793171776"
                        "79883896108";"79906765690";"79626132019";"79039899109";"79793880706";"";"79801516450"
                        "79751604335";"79670838510"
                        "79980208659";"79256995905";"79752192866";"79788594144";"79984681245";"79972421362"
                        "79824863860";"79337613610";"79813177894";"79165735861";"79223606299";"79675754292";"79445870485"
                        "79532289856";"79814332519";"79676207182";"79859711872";"79938506620";"";"79440711895";"79413546980"
                        "79117071954";"79664553767";"";"";"79392473413"
                        "79184342844";"79969120218";"79201872806";"79144980750";"79872022636";"79845613796";"79324824112";"79481951849";"79030491306";"";"79577584379"
                        "79548172270";"";"79606617965";"79424853562";"79038533139";"79907933478"
                        "79147324835";"79512690523";"79230816435";"79727672830";"79605946515";"79042873141";"79584273051";"79568631594";"79861540949";"79466810982"
                        "79922662144";"79221862005";"";"79819630839"
                        "79131367590";"79228902487";"79247186050";"79064381968";"79422240944";"79316867880";"79399653265";"79385804104"
                        "79230027961";"79526163648";"";"79273224064"
                        "79303846732";"79346979784"
                        "79048038808";"79916355993";"79412224791";"79379570780";"79712234007";"79843695615";"79502379805";"79569014487";"79216165493";"79475822772"
                        "79157287051";"79578687126";"79850973354";"";"79122477933";"79478179000"
                        "79925957035";"79557577343";"79089134748";"79746578804";"79600227953"
                        "79639175782";"79487427866";"";"79764863936";"79958905653";"79359333059";"79914693365";"79418053173"
                        "79124848855";"79834460919";"79226123768";"79248880421"
                        "79784607118";"79680516886";"79146480718";"79762081659";"79283267142";"79689140055";"79591806021";"79137874384"
                        "79766420300";"79827806372";"79799211756";"79110124857";"79884150718";"79947616066";"79501601894";"79918795033";"79242154769"
                        "79426689148";"79992103540";"79121825399";"79947648007";"79659324988"
                        "79550863802";"";"79498823312";"79591569299";"79684299524";"79648748255"
                        "79721475694";"79466368805";"79266455497";"";"79075539358";"";"79773261291";"";"79618068470"
                        "79292435872";"79443698236";"79483635569"
                        "79925232542";"79469188924";"79712584811";"79405119665";"79864871360";"79179258739";"79127563038";"79604324555";"79449155394"
                        "79514599052";"79061850258";"79962275265";"";"";"79038653184";"79388542749";"79455712584";"79561506930";"79915192771";"79774142331"
                        "79465161350";"79965396371";"79498154686";"79293433104";"79780325413";"79019742469";"79917632968";"79463364613";"79962965433";"79546011880"
                        "79447181742";"";"";"79977415915";"79035655635";"79687585297"
                        "79201367682";"79248897605";""
                        "79303043058";"79303041698";"79236972945";"79321953660";"79591607714"
                        "79400314443";"79777280416";"79062897025";"79865228276";"79532160617";"79991031200";"79799345767";"79555040825";"79800802514";"";"79209630466"
                        "79890302928";"";"79687363412";"79493451214";"79363380070"
                        "79588356481";"";"79950954624";"";"";"79659161450";"79854295797";"79241689530";"79652221207";"79126054563";"79291775256"
                        "79473288513";"79479437742"
                        "79627987649";"79042008351"
                        "79602526314";"79381924252";"79668952702";"";"79752974530";"79770328643";"79207324856"
                        "79364062251";"79064898565";"79874734588"
                        "79203153475";"79208663835";"79090805978"
                        "79254643232";"79349589810";"79862661845"
                        "79715742203";"79748613387";"79526248709";"79192699609";"79098040799";"79283023566";"79142755062";"79370907197";"";"79786604311"
                        "79502547911";"79350641410";"79935804934";"";"79462112288";""
                        "";"79060332270";"79963945814";"79571857485";"";"";"79356231736";"79028860360"
                        "79736315000";"79975014494";"79259821902";"79295291864";"79504402129";"79532061612";"79961937910";"79850110574";"79796522442"
                        "79044583890";"79560622597"
                        "";"79310589728";"79048169214";"79594576416";"79812365960";"79074798380"
                        "79274675847";"79093114282";"";"79532326730";"79100681480";"79993309599";"";"79210305018";"79485177839";"79665307841";"79656712265"
                        "79544630041";"79967903647";""
                        "79806104321";"79965674823";"79262943323";"79616890041";"79658173797";"79858388812";"79808063101";"79118627986"
                        "79796242235";"79214807508";"79869928490";"79433740232";"79651860938";"79868269117";"79362315512";"79805649202";""
                        "79512437331";"79917152135";"79428694196";"";"79520983635";"79382441718";"79096708615";"79205400301"
                        "79883592594";"79246344300";"79368908244";"79775965145"
                        "79177527665";"79240304487";"79363952147";"79603062356";"79749852599";"79021882814";"79026876838"
                        "79586675401";"79368895805";"79013068954";"79853523320";"79380383786";"79079658835"
                        "79231047599";"";"79503046889";"79001422635";"";"79890021239";"79525290981";"79629480480";"79296326361";"79902996402"
                        "79253118753";"79127469115";"79138218492";"79662439463";"79203296253";"79989292032";"79060030759";"79728708476"
                        "79775145941";"79267397454";"79684236907";"79305167041"
                        "79329689199";"79204694407";"79389909010";"79628886415";"79460246585";"79584514021";"";"";"79655842541"
                        "79378821916";"79908268565";"79571316434";"79669513742";"79109676226";"79154714467";"79625000567";"79691785618";"79431497787";"79124725643"
                        "79348240156";"79825069292";"79759574900";"79625483238";"79619299941";"79904539285";"79409376966"
                        "79997988218";"79900868637";"79089397354";"79932950832";"";"79622867636";"79113617465";"79403225908";"79203202541"
                        "79185536155";"";"79434234438"
                        "79301820256";"79844719967";"79608326688";"";"79028051101";""
                        "79807758847";"79596511530";"";"79129675486";"79099269456";"79796732069"
                        "79138975153";"79975326290";"79837543751";"79883299176";"";"79826595874";"79903077785";"79154839051"
                        "79637752969";"79529826649";"79015951485";"79529622806";"79436267201";"79200981029"
                        "79925985092";"79128731813";"79909771777";"79520238987";"79462810934";"79968530023"
                        "79196850974";"79160243752"
                        "79920797752";"79428328503";"79741897983";"79714462702";"79329223716"
                        "79202458558";"79648082183";"79611449259";"79592139364";"79896448718";"79589459477";""
                        "79116168019";"79940451649";"79623162625"
                        "79895876706";"79023453592";"79384859390";"79706625706";"79861519888";"79257859372";"";"79166082202";"79379554018";"79159235263"
                        "79991780474";"79082893127";"79433990879"
                        "";"79276653067";"79949794371";"";"79888261482";"79135249284";"79348061076";"79754346136";"79175256912"
                        "79168891370";"79414067594";"79765349071";"79417657904";"79189282569";"79433768924";"79532867892";"79203814686";""
                        "";"79972937402";"";"79732761893";"79782730267";"79394774258";"79460622053";"79641467824";"79686635298";"79274960994"
                        "79014441098";"79523470689";"79330240246";"79057143568";"79411620940";"79556561559";"79670697850";"79886442518"
                        "79279072764";"79412408155";"79873133845";"79765293223";"79820436611"
                        "79405321446";"79591386810";"79667574972";"79125171871";"79580536316";"79204863581";"79641082340";"79763841995";"79902162634";"79734166829"
                        "79183494978";"79517248782";"79950963020"
                        "79408150652";"79427002404";"79337073481";"79792113467"
                        "79105060909";"79916739657"
                        "";"79687283295";"79946435046";"79302386118";""
                        "79252738256";"79461929934";"79124284547";"79238712836"
                        "79696319726";"79985746653";"79860617075";"79998347320";"79506128085";"79680116534";"79511285944"
                        "79635057345";"";"79022015278";"79058800196";"79848319450";"79983723832";"79560764108";"79780206607";"79949100893"
                        "79355026380";"79030936524";"79377533023";""
                        "";"79117357451";"79599414504";"";"79412663805"
                        "79294204108";"79793374508";"79429010963";"79684419566"
                        "79801793582";"79316796917";"79185978893";"";"79702891277";"79609783280"
                        "79663997239";"79678209717";"79084113375";"79369867902";"79902735968";"";"79239559029";"79624343627"
                        "79387147839";"79837222285";"79728549114";"79708867158";"79236925045";"79929575061";"79800324680"
                        "79443800597";"79125979777";"79443353826";"79716393932";"79350375567";"79812031396"
                        "79681478189";"79008887761";"79263541366";"79853951532";"";"79158961929";"";"79584094394";"79438737943"
                        "79282294563";"79538578460"
                        "79007431397";"79795463570";"79646145127";"";"79052564365";"79666487079"
                        "79141628366";"79810235024";"79067322308";"79825495369";"79136657357";"79216304711";"79309392073"
                        "79096243656";"79661485730"
                        "";"79713259818";"";"79353918669";"79154072203";"79681805472";"79968798369";"79287118207";"";"79740778973";"79678003157"
                        "";"79504694228";"79086946717";"79939930522";"79564604675";"79434160782";"79975608779";"79051519739";"79581423231"
                        "79953073052";"79656543830";"79340818086"
                        "79595707188";"79944784020";"79181280039";"79563027624";"79919550659";"79219984669";"79050933115";"79095551371";"79566634695"
                        "79495434220";"79323125474"
                        "79782720607";"79135788221";"79371286469";"79554415855";"";"79125714583";"79958681784";"79809695918";"79219546635"
                        "79870357070";"79815973293";"79371286469";"79806266871";"79578474810";"";"79478889591";"79628439950";"79548481058";"79681829377";"79631718704"
                        """
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(178 - 3 - 1, groups.size());
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 1));
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 4));
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 2));
    }

    @Test
    void allLinesDifferentGroups(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "1;2;3;4;5;6",// Group 1
                "2;3;4;5;6;7", // Group 2
                "3;4;5;6;7;8",// Group 3
                "4;5;6;7;8;9",// Group 4
                "5;6;7;8;9;10",// Group 5
                "6;7;8;9;10;11"// Group 6
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(6, groups.size());
        assertTrue(groups.stream().allMatch(g -> g.getLength() == 1));
    }

    @Test
    void differentLengthLines(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("test.txt");
        Files.write(testFile, List.of(
                "1",// Group 1
                "2;3", // Group 2
                "3;;5",// Group 3
                "2;",// Group 2
                "5;6;",// Group 4
                "6;6",// Group 4
                "6"// Group 4
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(4, groups.size());
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 1));
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 2));
        assertTrue(groups.stream().anyMatch(g -> g.getLength() == 3));
    }

    @Test
    void skipInvalidLines1(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("invalid.txt");
        Files.write(testFile, List.of(
                "111;123;222",// Group 1
                "\"8383\"200000741652251\"", // invalid
                "111;;100"// Group 1
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(1, groups.size());
        assertTrue(groups.stream().allMatch(g -> g.getLength() == 2));
    }

    @Test
    void skipInvalidLines2(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("invalid.txt");
        Files.write(testFile, List.of(
                "111;123;222",// Group 1
                "\"838aaaaaaa00000741652251\"", // invalid
                "\"83bbbb0000741652251\"", // invalid
                "\"83   0000741652251\"", // invalid
                "111;;100"// Group 1
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(1, groups.size());
        assertTrue(groups.stream().allMatch(g -> g.getLength() == 2));
    }

    @Test
    void emptyFile(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("empty.txt");
        Files.write(testFile, new ArrayList<>(List.of()));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertTrue(groups.isEmpty());
    }

    @Test
    void removeDuplicateLines1(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("duplicates.txt");
        Files.write(testFile, List.of(
                "100;200;300",
                "100;200;300", // duplicate
                "200;300;100"
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(2, groups.size());
        assertTrue(groups.stream().allMatch(g -> g.getLength() == 1));
    }

    @Test
    void removeDuplicateLines2(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("duplicates.txt");
        Files.write(testFile, List.of(
                "100;200;300",
                "100;200;300", // duplicate
                "100;200;300", // duplicate
                "200;300;100",
                "200;300;100"// duplicate
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(2, groups.size());
        assertTrue(groups.stream().allMatch(g -> g.getLength() == 1));
    }

    @Test
    void removeDuplicateLines3(@TempDir Path tempDir) throws IOException {
        Path testFile = tempDir.resolve("duplicates.txt");
        Files.write(testFile, List.of(
                "100;200;300",
                "100;200;300", // duplicate
                "100;200;300", // duplicate
                "200;300;100",
                "200;300;100",// duplicate
                "100;200;300" // duplicate
        ));

        List<Group> groups = groupBuilder.getGroups(testFile.toString());
        assertEquals(2, groups.size());
        assertTrue(groups.stream().allMatch(g -> g.getLength() == 1));
    }
}